-- role
create table if not exists roles (
    key text primary key,
    name text not null,
    created_at timestamp not null default current_timestamp
);

insert into roles (key, name, created_at) values ('ROLE_ADMIN', '管理者', default);
insert into roles (key, name, created_at) values ('ROLE_GENERAL', '一般ユーザ', default);

-- members
create table if not exists members (
    id serial primary key,
    name varchar(100) not null,
    mail text unique,
    password text not null,
    phone_number varchar(15),
    role text references roles(key),
    updated_at timestamp not null default current_timestamp,
    created_at timestamp not null default current_timestamp
);

-- site_types
create table if not exists site_types (
    id int primary key,
    name text not null,
    capacity int not null,
    created_at timestamp not null default current_timestamp
);

insert into site_types (id, name, capacity, created_at) values (1, '区画サイト（AC電源なし）', 6, default);
insert into site_types (id, name, capacity, created_at) values (2, '区画サイト（AC電源あり）', 6, default);
insert into site_types (id, name, capacity, created_at) values (3, 'コテージ', 4, default);

-- sales_tax
create table if not exists sales_tax (
    date_from date primary key,
    date_to date,
    rate numeric(3, 2) not null,
    created_at timestamp not null default current_timestamp
);

insert into sales_tax (date_from, date_to, rate, created_at) values ('2019-10-01', '2030-12-31', 0.10, default);

-- rate_types
create table if not exists rate_types (
    id int primary key,
    name text not null,
    created_at timestamp not null default current_timestamp
);

insert into rate_types (id, name, created_at) values (1, '通常料金', default);
insert into rate_types (id, name, created_at) values (2, 'ハイシーズン料金', default);

-- site_rates
create table if not exists site_rates (
    site_type_id int references site_types(id),
    rate_type_id int references rate_types(id),
    date_from date,
    date_to date not null,
    rate int not null,
    created_at timestamp not null default current_timestamp,
    updated_at timestamp not null default current_timestamp,
    primary key (site_type_id, rate_type_id, date_from)
);

insert into site_rates (site_type_id, rate_type_id, date_from, date_to, rate, updated_at, created_at)
values (1, 1, '2019-10-01', '2030-12-31', 2500, default, default);
insert into site_rates (site_type_id, rate_type_id, date_from, date_to, rate, updated_at, created_at)
values (1, 2, '2019-10-01', '2030-12-31', 3500, default, default);
insert into site_rates (site_type_id, rate_type_id, date_from, date_to, rate, updated_at, created_at)
values (2, 1, '2019-10-01', '2030-12-31', 4500, default, default);
insert into site_rates (site_type_id, rate_type_id, date_from, date_to, rate, updated_at, created_at)
values (2, 2, '2019-10-01', '2030-12-31', 5500, default, default);
insert into site_rates (site_type_id, rate_type_id, date_from, date_to, rate, updated_at, created_at)
values (3, 1, '2019-10-01', '2030-12-31', 5000, default, default);
insert into site_rates (site_type_id, rate_type_id, date_from, date_to, rate, updated_at, created_at)
values (3, 2, '2019-10-01', '2030-12-31', 7000, default, default);

-- calendar
create table if not exists calendar (
    calendar_date date primary key,
    rate_type_id int not null,
    created_at timestamp not null default current_timestamp
);

insert into calendar (calendar_date, rate_type_id, created_at)
select
  generate_series,
  case
      when extract(month from generate_series) in (07, 08, 09) then 2
      else 1
  end,
  to_timestamp('2019-10-01', 'YYYY-MM-DD')
from
  generate_series('2019-10-01'::date, '2030-12-31', '1 day');

-- site_availability
create table if not exists site_availability (
    calendar_date date references calendar(calendar_date),
    site_type_id int references site_types(id),
    availability_count smallint not null,
    max_count smallint not null,
    updated_at timestamp not null  default current_timestamp,
    created_at timestamp not null  default current_timestamp,
    primary key (calendar_date, site_type_id)
);

insert into site_availability (calendar_date, site_type_id, availability_count, max_count, updated_at, created_at)
select
  generate_series,
  1,
  5,
  5,
  to_timestamp('2019-10-31', 'YYYY-MM-DD'),
  to_timestamp('2019-10-31', 'YYYY-MM-DD')
from
  generate_series('2019-10-01'::date, '2030-12-31', '1 day')
union all
select
  generate_series,
  2,
  4,
  4,
  to_timestamp('2019-10-31', 'YYYY-MM-DD'),
  to_timestamp('2019-10-31', 'YYYY-MM-DD')
from
  generate_series('2019-10-01'::date, '2030-12-31', '1 day')
union all
select
  generate_series,
  3,
  3,
  3,
  to_timestamp('2019-10-31', 'YYYY-MM-DD'),
  to_timestamp('2019-10-31', 'YYYY-MM-DD')
from
  generate_series('2019-10-01'::date, '2030-12-31', '1 day');

-- reservations
create table if not exists reservations (
    id serial primary key,
    site_type_id int not null references site_types(id),
    date_from date not null,
    stay_days int not null,
    number_of_people int not null,
    total_amount_tax_incl int not null,
    sales_tax int not null,
    member_id int  references members(id) check (
    case
        when non_member_name is null
            and non_member_mail is null
            and non_member_phone_number is null
            and member_id is not null then true
        when non_member_name is not null
            and non_member_mail is not null
            and non_member_phone_number is not null
            and member_id is null then true
        else false
    end),
    non_member_name varchar(100),
    non_member_mail text,
    non_member_phone_number varchar(15),
    canceled_at timestamp,
    created_at timestamp not null default current_timestamp
);

-- reservation_details
create table if not exists reservation_details (
    reservation_id int references reservations(id),
    reservation_date date not null,
    site_rate int not null,
    tax_rate numeric(3, 2) not null,
    rate_type_name text not null,
    created_at timestamp not null default current_timestamp,
    primary key (reservation_id, reservation_date)
);
